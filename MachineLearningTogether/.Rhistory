lgrid
knnPredGrid <- predict(knnFitRep, newdata=lgrid)
knnPredGrid
probs <- matrix(knnPredGrid, length(x1),
length(x2))
contour(pl, pw, probs, labels="", xlab="", ylab="", main=
"X-nearest neighbour", axes=FALSE)
contour(x1, x2, probs, labels="", xlab="", ylab="", main=
"X-nearest neighbour", axes=FALSE)
x1
x2
probs
probs[1]
probs[1,]
dim(probs)
library(datasets)
library(tictoc)
rm(list = ls())
cat("\014")
data(iris)
summary(iris)
attach(iris)
plot(iris, col = Species)
dataset <- select(iris, Sepal.Length, Sepal.Width, Species)
########################### ANALYZING IRIS DATASET ###########################
### this script is to apply all the theory we have seen in the previous lectures
library(datasets)
library(tidyverse)
library(caret)
library(magrittr)
library(tictoc)
rm(list = ls())
cat("\014")
data(iris)
summary(iris)
attach(iris)
plot(iris, col = Species)
dataset <- select(iris, Sepal.Length, Sepal.Width, Species)
ggplot(dataset, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point()
set.seed(1)
Species
set.seed(1)
trainingRows <- sample(1:length(Species), size = .8 * length(Species))
trainingRows <- sample(1:length(Species), size = .8 * length(Species))
dataset <- dataset %>% mutate(selected = 0)
dataset$selected[trainingRows] <- 1
dataset$selected %<>% as.factor
plot1 <- ggplot(dataset, aes(x = Sepal.Length, y = Sepal.Width, color = selected)) +
geom_point()
table(dataset %>% .$Species)
table(dataset %>% filter(selected == 1) %>% .$Species)
trainingRows <- createDataPartition(Species,
p = .8,
list = FALSE)
dataset <- dataset %>% mutate(selected = 0)
dataset$selected[trainingRows] <- 1
dataset$selected %<>% as.factor
plot2 <- ggplot(dataset, aes(x = Sepal.Length, y = Sepal.Width, color = selected)) +
geom_point()
table(dataset %>% .$Species)
table(dataset %>% filter(selected == 1) %>% .$Species)
plot1
plot2 # more dispersed
dataset %<>% select(-selected)
set.seed(100)
tic()
svmFitRep10F <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 10,
trControl = trainControl(method = "repeatedcv",
repeats = 10,
classProbs = TRUE)
)
timesvmFitRep10F <- toc()
tic()
svmFit10F <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 10,
trControl = trainControl(method = "cv",
number = 10,
classProbs = TRUE)
)
timesvmFit10F <- toc()
tic()
svmboot100 <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 10,
trControl = trainControl(method = "boot",
number = 100
)
)
timesvmboot100 <-toc()
tic()
svmboot50 <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 10,
trControl = trainControl(method = "boot",
number = 50
)
)
timesvmboot50 <- toc()
tic()
svmLOOCV <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 10,
trControl = trainControl(method = "LOOCV")
)
timesvmLOOCV <-toc()
svmFitRep10F
svmFit10F
svmboot100
svmboot50
svmLOOCV
timesvmFitRep10F$toc -timesvmFitRep10F$tic
timesvmFit10F$toc - timesvmFit10F$tic
timesvmboot100$toc - timesvmboot100$tic
timesvmboot50$toc - timesvmboot50$tic
timesvmLOOCV$toc - timesvmLOOCV$tic
plot(svmFitRep10F)
plot(svmFit10F)
plot(svmboot100)
plot(svmboot50)
plot(svmLOOCV)
plot(svmFitRep10F)
plot(svmFit10F)
plot(svmboot100)
plot(svmboot50)
plot(svmLOOCV)
plot(svmFit10F)
plot(svmFitRep10F)
plot(svmFit10F)
plot(svmFitRep10F)
plot(svmFit10F)
150*0.1
1-0.63
0.37*150
plot(svmboot100)
plot(svmboot50)
15'-55'
150-5
plot(svmLOOCV)
plot(svmboot50)
plot(svmLOOCV)
plot(svmFit10F) # -> 10 validation errors
plot(svmLOOCV)
plot(svmboot100)
plot(svmboot50)
plot(svmFitRep10F) # -> 100 validation errors
plot(svmboot100)
plot(svmboot50)
timesvmFitRep10F$toc -timesvmFitRep10F$tic
timesvmboot100$toc - timesvmboot100$tic
timesvmboot50$toc - timesvmboot50$tic
plot(svmFitRep10F) # -> 100 validation errors
svmFitRep10F
plot(svmFit10F) # -> 10 validation errors
plot(svmboot100)
plot(svmboot50)
plot(svmLOOCV)
plot(svmFitRep10F) # -> 100 validation errors
plot(svmFit10F) # -> 10 validation errors
plot(svmLOOCV)
0.9-0.63
plot(svmFitRep10F) # -> 100 validation errors
plot(svmFit10F) # -> 10 validation errors
plot(svmboot100)
plot(svmFitRep10F) # -> 100 validation errors
set.seed(102)
knnFitRep <- train(Species ~.,
data = dataset,
method = "knn",
metric = "Accuracy",
preProc = c("center", "scale"),
tuneLength = 30,
trControl = trainControl(method = "repeatedcv",
repeats = 10,
classProbs = TRUE)
)
plot(knnFit)
knnFitboot <- train(Species ~.,
data = dataset,
method = "knn",
metric = "Accuracy",
preProc = c("center", "scale"),
tuneLength = 30,
trControl = trainControl(method = "boot",
number = 100
)
)
plot(knnFitboot)
knnFitcv <- train(Species ~.,
data = dataset,
method = "knn",
metric = "Accuracy",
preProc = c("center", "scale"),
tuneLength = 30,
trControl = trainControl(method = "cv",
number = 10,
classProbs = TRUE)
)
plot(knnFitcv)
multinomLogRegFit <- train(Species ~.,
data = dataset,
method = "multinom",
metric = "Accuracy",
preProc = c("center", "scale"),
tuneLength = 30,
trace = FALSE,
trControl = trainControl(method = "repeatedcv",
repeats = 10,
classProbs = TRUE)
)
plot(multinomLogRegFit)
svmFitRep10F <- train(Species ~.,
data = dataset,
method = "svmRadial",
preProc = c("center", "scale"),
metric = "Accuracy",
tuneLength = 15,
trControl = trainControl(method = "repeatedcv",
repeats = 10,
classProbs = TRUE)
)
plot(svmFitRep10F)
knnFitRep
plot(knnFit)
plot(knnFitRep)
knnFitboot
plot(knnFitboot)
plot(knnFitRep)
plot(knnFitboot)
knnFitcv
plot(knnFitcv)
plot(knnFitRep)
plot(knnFitcv)
multinomLogRegFit
plot(svmFitRep10F)
resamp <- resamples(list(KNN = knnFitRep,
svm = svmFitRep10F,
multipleLog = multinomLogRegFit)
)
summary(resamp)
bwplot(resamp)
# linear regression model
library(caret)# Simple linear regression model (lm means linear model)
data(mtcars)    # Load the dataset
head(mtcars)
# regression over a variable
model <- train(mpg ~ wt,
data = mtcars,
method = "lm")
# Multiple linear regression model
model <- train(mpg ~ .,
data = mtcars,
method = "lm")
summary(model)
# Ridge regression model
model <- train(mpg ~ .,
data = mtcars,
method = "ridge") # Try using "lasso"
summary(model)
model.cv <- train(mpg ~ .,
data = mtcars,
method = "lasso",  # now we're using the lasso method
trControl = fitControl)
## 10-fold CV# possible values: boot", "boot632", "cv", "repeatedcv", "LOOCV", "LGOCV"
fitControl <- trainControl(method = "repeatedcv",
number = 10,     # number of folds
repeats = 10)    # repeated ten times
model.cv <- train(mpg ~ .,
data = mtcars,
method = "lasso",  # now we're using the lasso method
trControl = fitControl)
model.cv
lambda <- 10^seq(-3, 3, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
lmFitAllPredictors <- lm(Solubility ~ ., data = trainingData)
summary(lmFitAllPredictors)
library(caret)
lmPred1 <- predict(lmFitAllPredictors, solTestXtrans)
lmValues1 <- data.frame(obs = solTestY, pred = lmPred1)
defaultSummary(lmValues1)
ctrl <- trainControl(method = "cv", number = 10)
set.seed(100)
lmFit1 <- train(x = solTrainXtrans,
y = solTrainY,
method = "lm",
trControl = ctrl
)
xyplot(solTrainY ~ predict(lmFit1),
type = c("p", "g"),  #plot the points (type ='p') and a background grid     ('g')
xlab = "Predicted",
ylab = "Observed"
)
xyplot(resid(lmFit1) ~ predict(lmFit1),
type = c("p", "g"),
xlab = "Predicted",
ylab = "Residuals")
corThresh <- .9
tooHigh <- findCorrelation(cor(solTrainXtrans), corThresh)
corrPred <- names(solTrainXtrans)[tooHigh]
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered <- solTestXtrans[, -tooHigh]
set.seed(100)
lmFiltered <- train(solTrainXtrans, solTrainY, method = "lm",                    trControl = ctrl)
lmFiltered
ridgeGrid <- data.frame(.lambda = seq(0, .1, length = 15))
set.seed(100)
ridgeRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "ridge",
tuneGrid = ridgeGrid,
trControl = ctrl,                                                          preProc = c("center", "scale")
)
ridgeRegFit
plot(ridgeRegFit, xlab ="Penalty")
lambda <- 10^seq(-3, 3, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
enetGrid <- expand.grid(.lambda = c(0, 0.01, .1),
.fraction = seq(.05, 1, length = 20)
)
set.seed(100)
enetTune <- train(solTrainXtrans, solTrainY,
method = "enet",
tuneGrid = enetGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
enetTune
enetTune
lambda <- 10^seq(-3, 3, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
10^(-1)
lambda <- 10^seq(-3, 0, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
lambda <- 10^seq(-3, 0.1, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
enetTune <- train(solTrainXtrans, solTrainY,
method = "enet",
tuneGrid = enetGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
lambda <- 10^seq(-3, 0.1, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
lambda <- 10^seq(-3, 0.1, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
plot(lassoRegFit)
lambda
10^seq(-3, 0.1, length = 100)
10^0.1
seq(-3, 0.1, length = 100)
lambda <- seq(-3, 0.1, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
plot(lassoRegFit)
lambda <- seq(0, 1, length = 100)
lambda
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
plot(lassoRegFit)
lambda <- seq(0, 0.3, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
lambda <- seq(0, 0.1, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
lambda <- seq(0, 0.04, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
lambda <- seq(0, 0.20, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = lambda),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
```{r}
enetGrid <- expand.grid(.lambda = c(0, 0.01, .1),
.fraction = seq(.05, 1, length = 20)
)
set.seed(100)
enetTune <- train(solTrainXtrans, solTrainY,
method = "enet",
tuneGrid = enetGrid,
trControl = ctrl,
preProc = c("center", "scale")
)
enetTune
plot(enetTune)
model.lasso <- train(solTrainXtrans, solTrainY,
data = train.preproc,
method = "lasso",
tuneLength = 20,
trControl = ctrl,
preProc = c("center", "scale")
)
model.lasso <- train(solTrainXtrans, solTrainY,
method = "lasso",
tuneLength = 20,
trControl = ctrl,
preProc = c("center", "scale")
)
enetTune <- train(solTrainXtrans, solTrainY,
method = "enet",
tuneLength =  10,
trControl = ctrl,
preProc = c("center", "scale")
)
enetTune
model.lasso
plot(model.lasso)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "enet",
tuneGrid = expand.grid(fraction = fraction, lambda = 0),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
fraction <- seq(0, 0.20, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "enet",
tuneGrid = expand.grid(.fraction = fraction, lambda = 0),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "enet",
tuneGrid = expand.grid(fraction = fraction, lambda = 0),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
fraction <- seq(0.01, 0.20, length = 100)
set.seed(100)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "enet",
tuneGrid = expand.grid(fraction = fraction, lambda = 0),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit <- train(solTrainXtrans, solTrainY,                                                 method = "enet",
tuneGrid = expand.grid(fraction = fraction, lambda = 0),                        trControl = ctrl,                                                          preProc = c("center", "scale")
)
lassoRegFit
plot(lassoRegFit)
model.lasso
plot(model.lasso)
